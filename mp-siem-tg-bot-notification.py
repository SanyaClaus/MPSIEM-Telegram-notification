import time
from datetime import datetime, timedelta
import requests
import db_querys
import settings
import db
import pretty_log

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = pretty_log.PrettyLog(prefix="Main", limit=10)
log = logger.logging

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π SSL –≤ –∫–æ–Ω—Å–æ–ª—å
requests.packages.urllib3.disable_warnings()

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ URL
requests.adapters.DEFAULT_RETRIES = 5

# –°–ª—É–∂–µ–±–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_db_connect, bot_db_cursor = db.connection_init()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –±–æ—Ç–∞
bearer_token = None  # —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–≤—è–∑–∏ —Å SIEM
bearer_token_lifetime = None
refresh_token = None  # —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π refresh_token –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bearer_token
chat_ids = db.DbTable(bot_db_connect, bot_db_cursor, db_querys.user_allowed_insert, db_querys.user_allowed_get,
                      db_querys.user_allowed_delete)

# —Ö—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
last_incident_time = db.DbVariable(bot_db_connect, bot_db_cursor, db_querys.last_incident_time_set,
                                   db_querys.last_incident_time_get)
# —Ö—Ä–∞–Ω–∏—Ç –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Telegram
last_update = db.DbVariable(bot_db_connect, bot_db_cursor, db_querys.last_update_set, db_querys.last_update_get)


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def get_bearer_token():
    url = settings.base_url + ":3334/connect/token"
    payload = "username=" + settings.username + \
              "&password=" + settings.password + \
              "&client_id=" + settings.client_id + \
              "&client_secret=" + settings.client_secret + \
              "&grant_type=password" \
              "&response_type=code%20id_token" \
              "&scope=authorization%20offline_access%20mpx.api%20ptkb.api "
    headers = {
        **settings.default_header,
        **{"Content-Type": "application/x-www-form-urlencoded",
           "Authorization": "Bearer undefined"}
    }
    response = requests.request("POST", url, data=payload, headers=headers, verify=False)

    global bearer_token, refresh_token, bearer_token_lifetime
    if 'invalid_username_or_password' in response.text:
        log("Auth error: invalid_username_or_password")
        return 0
    if "access_token" in response.text:
        json_response = response.json()
        bearer_token = json_response["access_token"]
        bearer_token_lifetime = json_response["expires_in"]
        refresh_token = json_response["refresh_token"]
        log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
    return bearer_token


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
def get_incidents(token):
    global last_incident_time
    # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ last_incident_time –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not last_incident_time.get():
        today = datetime.now()
        last_1d = (today - timedelta(days=1)).isoformat()
        # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –ø–æ –¥–∞—Ç–µ (—Å—É—Ç–∫–∏)
        last_incident_time.set(last_1d)
    log("–ü—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –æ—Ç {0}, —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω {1}".format(last_incident_time.get(), token))

    url = settings.base_url + "/api/v2/incidents/"
    # —Ñ–∏–ª—å—Ç—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    payload = {
        "offset": 0,
        "limit": 50,
        "groups": {"filterType": "no_filter"},
        "timeFrom": last_incident_time.get(),
        "timeTo": None,
        "filterTimeType": "creation",
        "filter": {
            "select": ["key", "name", "category", "type", "status", "created", "assigned"],
            "orderby": [
                {
                    "field": "created",
                    "sortOrder": "descending"
                },
                {
                    "field": "status",
                    "sortOrder": "ascending"
                },
                {
                    "field": "severity",
                    "sortOrder": "descending"
                }
            ]
        },
        "queryIds": ["all_incidents"]
    }
    headers = {
        **settings.default_header,
        **{"Content-Type": "application/json", "Authorization": "Bearer {0}".format(token)}
    }

    response = requests.request("POST", url, json=payload, headers=headers, verify=False)

    if response.status_code == 401:
        return 401
    return response.json()['incidents']


# –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
def incident_to_string(incident):
    try:
        # –≤—Ä–µ–º—è –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ –Ω–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        inc_date = (datetime.fromisoformat(incident['created'][:23]) + settings.time_zone).strftime("%Y.%m.%d %H:%M:%S")
        inc_id = incident['id']
        inc_key = incident['key']
        inc_severity = incident['severity']
        inc_type = incident['type']
        inc_name = incident['name']
        inc_status = incident['status']
        inc_link = f'{settings.base_url}/#/incident/incidents/view/{inc_id}'

        # –∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—é –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è—é —Ü–≤–µ—Ç–Ω–æ–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        if inc_severity == "High":
            inc_severity = "–í—ã—Å–æ–∫–∞—è üî¥"
        elif inc_severity == "Medium":
            inc_severity = "–°—Ä–µ–¥–Ω—è—è üü†"
        elif inc_severity == "Low":
            inc_severity = "–ù–∏–∑–∫–∞—è üü°"

        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É
        events = get_events_by_incident_id(incident_id=inc_id)
        events_str = "\n–ò–Ω—Ü–∏–¥–µ–Ω—Ç –±–µ–∑ —Å–æ–±—ã—Ç–∏–π"
        # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
        if len(events) > 0:
            events_str = "\n–°–æ–±—ã—Ç–∏—è –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É: \n\n"
            ev_number = 0
            # –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –≤ —Å—Ç—Ä–æ–∫—É events_str
            for ev in events:
                ev_number += 1
                ev_date = (datetime.fromisoformat(ev['date'][:23]) + settings.time_zone).strftime("%Y.%m.%d %H:%M:%S")
                ev_description = ev['description']
                ev_str = "–î–∞—Ç–∞: {0}\n–°–æ–±—ã—Ç–∏–µ: {1}".format(ev_date, ev_description)
                events_str = events_str + ev_str + "\n\n"
                # –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                if ev_number == settings.max_events_count:
                    events_str = events_str + "–ò –µ—â–µ {0} —Å–æ–±—ã—Ç–∏–π.".format(len(events) - ev_number)
                    break
        result_string = f"{inc_key}\n" \
                        f"–í—Ä–µ–º—è: {inc_date}\n" \
                        f"–û–ø–∞—Å–Ω–æ—Å—Ç—å: {inc_severity}\n" \
                        f"–¢–∏–ø: {inc_type}\n" \
                        f"–ò–º—è: {inc_name}\n" \
                        f"–°—Ç–∞—Ç—É—Å: {inc_status}\n" \
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {inc_link}" \
                        f"\n{events_str}"
        return result_string
    except Exception as ex_parse:
        log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: " + str(ex_parse))
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç"


# –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ id –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
def get_events_by_incident_id(incident_id):
    url = settings.base_url + "/api/incidents/" + incident_id + "/events"
    payload = ""
    headers = {
        **settings.default_header,
        **{"Authorization": "Bearer {0}".format(bearer_token)}
    }
    response = requests.request("GET", url, data=payload, headers=headers, verify=False)
    return response.json()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º
def get_telegram_updates(offset=0):
    try:
        response = requests.get("https://api.telegram.org/bot" + settings.tg_bot_token + "/getUpdates?offset="
                                + str(offset) + "&timeout=" + str(settings.tg_updates_timeout),
                                timeout=(settings.tg_updates_timeout+1, settings.tg_updates_timeout+1)
                                )
        if response.status_code == 200:
            response = response.json()
            return response
        else:
            return None
    except requests.exceptions.ConnectTimeout:
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º (–º–µ—Ç–æ–¥ getUpdates) - ConnectTimeout")
    except requests.exceptions.ConnectionError:
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º (–º–µ—Ç–æ–¥ getUpdates) - ConnectionError")
    except Exception as ex_tg_upd:
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º (–º–µ—Ç–æ–¥ getUpdates) - {0}".format(ex_tg_upd))


# –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–µ–ª–µ–≥—Ä–∞–º
def check_new_chats():
    global last_update
    log("–û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ì –≤ —Ç–µ—á–µ–Ω–∏–µ {0} —Å–µ–∫...".format(settings.tg_updates_timeout))
    updates = get_telegram_updates(last_update.get())
    if updates is None:
        log("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–ì.")
        return 0
    if len(updates['result']) == 0:
        log("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–ì.")
        return 0
    log("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –±–æ—Ç—É, –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    new_chats = []
    for up in updates["result"]:
        try:
            last_update.set(up["update_id"] + 1)
            up_type = str(up["message"]["entities"][0]["type"])
            up_text = str(up["message"]["text"])
            up_username = up["message"]["from"]["username"] if "username" in up["message"]["from"] \
                else up["message"]["from"]["id"]
            up_chat_id = up["message"]["chat"]["id"]
            log("–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {0}: {1}".format(up_username, up_text))
            if (up_type == "bot_command") and (up_text == "/start"):
                new_chats.append([up_username, up_chat_id])
            elif (up_type == "bot_command") and ("/accept" in up_text[:7]):
                if up_chat_id == settings.admin_chat_id:
                    allow_chat_id = up_text[7:]
                    if allow_chat_id not in chat_ids.get():
                        if chat_ids.append(allow_chat_id):
                            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                            send_telegram_message("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, "
                                                  "–∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —á–∞—Ç {0}".format(allow_chat_id))
                            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            send_telegram_message("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º.", [allow_chat_id])
                        else:
                            send_telegram_message("–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. "
                                                  "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
                    else:
                        send_telegram_message("–î–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —á–∞—Ç–∞ {0}".format(allow_chat_id))
            elif (up_type == "bot_command") and ("/deny" in up_text[:5]):
                if up_chat_id == settings.admin_chat_id:
                    deny_chat_id = up_text[5:]
                    if deny_chat_id in chat_ids.get():
                        chat_ids.remove(deny_chat_id)
                    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    send_telegram_message("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ù–ï –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è "
                                          "–≤ —á–∞—Ç {0}".format(deny_chat_id))
            elif (up_type == "bot_command") and ("/ping" in up_text[:10]) and up_chat_id in chat_ids:
                send_telegram_sticker(sticker_id=settings.ping_sticker, ids=[up_chat_id])
            elif (up_type == "bot_command") and ("/debug" in up_text[:6]):
                if up_chat_id == settings.admin_chat_id:
                    msg = f"last_incident_time = {last_incident_time.get()}\n" \
                          f"last_update = {last_update.get()}\n" \
                          f"chat_ids = {chat_ids.get()}\n" \
                          f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏: \n{logger}"
                    send_telegram_message(msg=msg)
        except KeyError:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –±—ã–ª–∞ –Ω–µ /–∫–æ–º–∞–Ω–¥–∞. "
                "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π update: \n{0}".format(up))
            try:
                # TODO: –æ–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
                up_chat_id = up['my_chat_member']['chat']['id']
                chat_name = up['my_chat_member']['chat']['title']
                log(f"–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {up_chat_id}")
                new_chats.append([chat_name, up_chat_id])
            except Exception as ex_add_chat:
                log("–ò –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç.\r{0}".format(ex_add_chat))
            continue
        except NameError:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –±—ã–ª–∞ –Ω–µ /–∫–æ–º–∞–Ω–¥–∞")
            continue
    if len(new_chats):
        str_new_chats = ""
        for i in new_chats:
            str_new_chats = str_new_chats + "@{0}\n(—Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ /accept{1}, " \
                                            "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å /deny{1}).\n".format(i[0], i[1])
        send_telegram_message("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞: \n" + str_new_chats)
    log("... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.")


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º
def send_telegram_message(msg, ids=None):
    # –¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º –≤ ids –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if ids is None:
        ids = [settings.admin_chat_id]
    for id in ids:
        try:
            response = requests.post("https://api.telegram.org/bot" + settings.tg_bot_token + "/sendMessage",
                                     data={'chat_id': id,
                                           'text': msg[:4096]})
            if response.status_code == 200:
                log("–í —á–∞—Ç {0} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {1}".format(id, msg).replace("\n", " \\ "))
            else:
                log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {0}. –û—à–∏–±–∫–∞: {1}".format(id, response).replace("\n", " \\ "))
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º–∞ (–∞–Ω—Ç–∏—Å–ø–∞–º)
            time.sleep(0.4)
        except Exception as ex_send_tg_msg:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {0}: {1}".format(id, ex_send_tg_msg))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ gif-–∫–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
def send_telegram_sticker(sticker_id, ids=None):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if ids is None:
        ids = [settings.admin_chat_id]
    for id in ids:
        try:
            response = requests.post("https://api.telegram.org/bot" + settings.tg_bot_token + "/sendSticker",
                                     data={'chat_id': id,
                                           'sticker': sticker_id})
            if response.status_code == 200:
                log("–í —á–∞—Ç {0} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –≥–∏—Ñ–∫–∞: {1}".format(id, sticker_id).replace("\n", " \\ "))
        except Exception as ex_send_tg_sticker:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –≥–∏—Ñ–∫—É –≤ —á–∞—Ç {0}: {1}".format(id, ex_send_tg_sticker))


# –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    send_telegram_message(msg="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    work = True
    while work:
        try:
            # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
            incidents = get_incidents(token=bearer_token)
            # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (—Å–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ –∏ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞)
            if incidents == 401:  # Unauthorised
                log("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ SIEM, –∞–≤—Ç–æ—Ä–∏–∑—É—é—Å—å.")
                # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
                if not get_bearer_token():
                    send_telegram_message(msg="–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ SIEM: –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
                    raise Exception("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
                continue
            # –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
            if len(incidents) > 0:
                log("–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã, –ø—Ä–æ–±—É—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö...")
                try:
                    send_telegram_message(msg="–ù–æ–≤—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã:", ids=chat_ids.get())
                    for inc in reversed(incidents):
                        time.sleep(0.5)
                        send_telegram_message(msg=incident_to_string(inc), ids=chat_ids.get())
                        # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã, –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é last_incident_time
                        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ + 1 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å
                        # –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç
                        new_last_inc_time = (datetime.fromisoformat(inc['created'][:23])
                                             + timedelta(milliseconds=1)).isoformat() + 'Z'
                        log("Try to set last_incident_time = {0}".format(new_last_inc_time))
                        last_incident_time.set(new_last_inc_time)
                except requests.exceptions.ConnectTimeout:
                    log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º - ConnectTimeout")
                except ValueError as ex:
                    log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {0}".format(ex))
                except Exception as ex:
                    log(ex)
                time.sleep(settings.pause_time)
            else:
                log("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
                time.sleep(settings.pause_time)
                check_new_chats()
        except Exception as ex:
            log(ex)
            send_telegram_message(msg="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n{0}".format(ex))
            raise
