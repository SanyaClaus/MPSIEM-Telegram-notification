import time
from datetime import datetime, timedelta
import requests
import db_querys
import settings
import db
import pretty_log

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = pretty_log.PrettyLog(prefix="Main", limit=10)
log = logger.logging

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π SSL –≤ –∫–æ–Ω—Å–æ–ª—å
requests.packages.urllib3.disable_warnings()

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ URL
requests.adapters.DEFAULT_RETRIES = 3

# –°–ª—É–∂–µ–±–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_db_connect, bot_db_cursor = db.connection_init()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –±–æ—Ç–∞
bearer_token = None  # —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–≤—è–∑–∏ —Å SIEM
bearer_token_lifetime = None  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
refresh_token = None  # —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π refresh_token –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bearer_token
allowed_chats_ids = db.DbTable(db_connection=bot_db_connect,
                               db_cursor=bot_db_cursor,
                               db_query_append=db_querys.user_allowed_insert,
                               db_query_get=db_querys.user_allowed_get,
                               db_query_del=db_querys.user_allowed_delete)
banned_chats_ids = db.DbTable(db_connection=bot_db_connect,
                              db_cursor=bot_db_cursor,
                              db_query_append=db_querys.user_banned_insert,
                              db_query_get=db_querys.user_banned_get,
                              db_query_del=db_querys.user_banned_delete)

# —Ö—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
last_incident_time = db.DbVariable(bot_db_connect, bot_db_cursor, db_querys.last_incident_time_set,
                                   db_querys.last_incident_time_get)
# —Ö—Ä–∞–Ω–∏—Ç –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Telegram
last_update = db.DbVariable(bot_db_connect, bot_db_cursor, db_querys.last_update_set, db_querys.last_update_get)


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def siem_get_bearer_token():
    url = settings.base_url + ":3334/connect/token"
    payload = "username=" + settings.username + \
              "&password=" + settings.password + \
              "&client_id=" + settings.client_id + \
              "&client_secret=" + settings.client_secret + \
              "&grant_type=password" \
              "&response_type=code%20id_token" \
              "&scope=authorization%20offline_access%20mpx.api%20ptkb.api "
    headers = {
        **settings.default_header,
        **{"Content-Type": "application/x-www-form-urlencoded",
           "Authorization": "Bearer undefined"}
    }
    response = requests.request("POST", url, data=payload, headers=headers, verify=False)

    global bearer_token, refresh_token, bearer_token_lifetime
    if 'invalid_username_or_password' in response.text:
        log("Auth error: invalid_username_or_password")
        return 0
    if "access_token" in response.text:
        json_response = response.json()
        bearer_token = json_response["access_token"]
        bearer_token_lifetime = json_response["expires_in"]
        refresh_token = json_response["refresh_token"]
        log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
    return bearer_token


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
def siem_get_incidents():
    global last_incident_time
    # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ last_incident_time –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not last_incident_time.get():
        today = datetime.now()
        last_1d = (today - timedelta(days=1)).isoformat()
        # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –ø–æ –¥–∞—Ç–µ (—Å—É—Ç–∫–∏)
        last_incident_time.set(last_1d)
    log("–ü—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –æ—Ç {0}, —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω {1}".format(last_incident_time.get(), bearer_token))

    url = settings.base_url + "/api/v2/incidents/"
    # —Ñ–∏–ª—å—Ç—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    payload = {
        "offset": 0,
        "limit": 50,
        "groups": {"filterType": "no_filter"},
        "timeFrom": last_incident_time.get(),
        "timeTo": None,
        "filterTimeType": "creation",
        "filter": {
            "select": ["key", "name", "category", "type", "status", "created", "assigned"],
            "orderby": [
                {
                    "field": "created",
                    "sortOrder": "descending"
                },
                {
                    "field": "status",
                    "sortOrder": "ascending"
                },
                {
                    "field": "severity",
                    "sortOrder": "descending"
                }
            ]
        },
        "queryIds": ["all_incidents"]
    }
    headers = {
        **settings.default_header,
        **{"Content-Type": "application/json", "Authorization": "Bearer {0}".format(bearer_token)}
    }

    response = requests.request("POST", url, json=payload, headers=headers, verify=False)

    if response.status_code == 401:
        return 401
    return response.json()['incidents']


# –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É
def siem_get_incident_by_id(incident_id):
    url = settings.base_url + "/api/incidentsReadModel/incidents/" + str(incident_id)
    headers = {
        **settings.default_header,
        **{"Content-Type": "application/json", "Authorization": "Bearer {0}".format(bearer_token)}
    }
    response = requests.request("GET", url, headers=headers, verify=False)

    if response.status_code == 401:
        return 401
    return response.json()


# –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
def incident_to_string(incident):
    try:
        # –≤—Ä–µ–º—è –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ –Ω–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        inc_date = (datetime.fromisoformat(incident['created'][:23]) + settings.time_zone).strftime("%Y.%m.%d %H:%M:%S")
        inc_id = incident['id']
        inc_key = incident['key']
        inc_severity = incident['severity']
        inc_type = incident['type']
        inc_name = incident['name']
        inc_status = incident['status']
        inc_link = f'{settings.base_url}/#/incident/incidents/view/{inc_id}'

        # –∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—é –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è—é —Ü–≤–µ—Ç–Ω–æ–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        if inc_severity == "High":
            inc_severity = "–í—ã—Å–æ–∫–∞—è üî¥"
        elif inc_severity == "Medium":
            inc_severity = "–°—Ä–µ–¥–Ω—è—è üü†"
        elif inc_severity == "Low":
            inc_severity = "–ù–∏–∑–∫–∞—è üü°"

        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É
        events = siem_get_events_by_incident_id(incident_id=inc_id)
        events_str = "\n–ò–Ω—Ü–∏–¥–µ–Ω—Ç –±–µ–∑ —Å–æ–±—ã—Ç–∏–π"
        # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
        if len(events) > 0:
            events_str = "\n–°–æ–±—ã—Ç–∏—è –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É: \n\n"
            ev_number = 0
            # –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –≤ —Å—Ç—Ä–æ–∫—É events_str
            for ev in events:
                ev_number += 1
                ev_date = (datetime.fromisoformat(ev['date'][:23]) + settings.time_zone).strftime("%Y.%m.%d %H:%M:%S")
                ev_description = ev['description']
                ev_str = "–î–∞—Ç–∞: {0}\n–°–æ–±—ã—Ç–∏–µ: {1}".format(ev_date, ev_description)
                events_str = events_str + ev_str + "\n\n"
                # –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                if ev_number == settings.max_events_count:
                    events_str = events_str + "–ò –µ—â–µ {0} —Å–æ–±—ã—Ç–∏–π.".format(len(events) - ev_number)
                    break
        result_string = f"{inc_key}\n" \
                        f"–í—Ä–µ–º—è: {inc_date}\n" \
                        f"–û–ø–∞—Å–Ω–æ—Å—Ç—å: {inc_severity}\n" \
                        f"–¢–∏–ø: {inc_type}\n" \
                        f"–ò–º—è: {inc_name}\n" \
                        f"–°—Ç–∞—Ç—É—Å: {inc_status}\n" \
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {inc_link}" \
                        f"\n{events_str}"
        return result_string
    except Exception as ex_parse:
        log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: " + str(ex_parse))
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç"


# –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ id –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
def siem_get_events_by_incident_id(incident_id):
    url = settings.base_url + "/api/incidents/" + incident_id + "/events"
    payload = ""
    headers = {
        **settings.default_header,
        **{"Authorization": "Bearer {0}".format(bearer_token)}
    }
    response = requests.request("GET", url, data=payload, headers=headers, verify=False)
    return response.json()


# –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
def siem_set_incident_status(incident_id, status, measures=None, message=None):
    url = settings.base_url + "/api/incidents/" + incident_id + "/transitions"
    payload = {
        "id": status,
        "measures": measures,
        "message": message
    }
    headers = {
        **settings.default_header,
        **{"Authorization": "Bearer {0}".format(bearer_token)}
    }
    log("–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç, payload: {0}; header: {1}".format(payload, headers))
    response = requests.request(method="PUT", url=url, headers=headers, verify=False, json=payload)
    return response.status_code


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º
def tg_get_updates(offset=0):
    try:
        response = requests.get("https://api.telegram.org/bot" + settings.tg_bot_token + "/getUpdates?offset="
                                + str(offset) + "&timeout=" + str(settings.tg_updates_timeout),
                                timeout=(settings.tg_updates_timeout + 1, settings.tg_updates_timeout + 1)
                                )
        if response.status_code == 200:
            response = response.json()
            return response
        else:
            return None
    except requests.exceptions.ConnectTimeout:
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º (–º–µ—Ç–æ–¥ getUpdates) - ConnectTimeout")
    except requests.exceptions.ConnectionError:
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º (–º–µ—Ç–æ–¥ getUpdates) - ConnectionError")
    except Exception as ex_tg_upd:
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º (–º–µ—Ç–æ–¥ getUpdates) - {0}".format(ex_tg_upd))


# –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–∞–µ–º—ã—Ö
def allow_chat(allow_chat_id):
    if allow_chat_id not in allowed_chats_ids.get():
        if allow_chat_id != '':
            if allowed_chats_ids.append(int(allow_chat_id)):
                return True, None
            else:
                return False, "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. " \
                              "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
        else:
            return False, "–ù–µ —É–∫–∞–∑–∞–Ω id —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
    else:
        return False, f"–î–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —á–∞—Ç–∞ {allow_chat_id}"


# –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç (–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞)
def ban_chat(ban_chat_id):
    if ban_chat_id not in banned_chats_ids.get():
        if ban_chat_id != '':
            if banned_chats_ids.append(int(ban_chat_id)):
                return True, None
            else:
                return False, "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. " \
                              "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
        else:
            return False, "–ù–µ —É–∫–∞–∑–∞–Ω id —á–∞—Ç–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
    else:
        return False, f"–î–æ—Å—Ç—É–ø —Ä–∞–Ω–µ–µ —É–∂–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {ban_chat_id}"


# –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–µ–ª–µ–≥—Ä–∞–º
def check_new_chats():
    global last_update
    log("–û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ì –≤ —Ç–µ—á–µ–Ω–∏–µ {0} —Å–µ–∫...".format(settings.tg_updates_timeout))
    updates = tg_get_updates(last_update.get())
    if updates is None:
        log("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–ì.")
        return 0
    if len(updates['result']) == 0:
        log("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–ì.")
        return 0
    log("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –±–æ—Ç—É, –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    new_chats = []
    for up in updates["result"]:
        try:
            last_update.set(up["update_id"] + 1)
            if 'message' in up:
                # –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if up['message']['from']['id'] in banned_chats_ids:
                    # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                    log("–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞")
                    continue
                if 'text' in up["message"]:
                    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
                    try:
                        up_chat_id = up["message"]["chat"]["id"]
                        up_text = str(up["message"]["text"])
                        up_username = '@' + up["message"]["from"]["username"] if "username" in up["message"]["from"] \
                            else up["message"]["from"]["first_name"] if "first_name" in up["message"]["from"] \
                            else up["message"]["from"]["id"]
                        log("–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {0}: {1}".format(up_username, up_text))
                        if up_text[0] == '/':
                            up_type = str(up["message"]["entities"][0]["type"])
                            if (up_type == "bot_command") and (up_text == "/start"):
                                new_chats.append([up_username, up_chat_id])
                            elif (up_type == "bot_command") and ("/accepted" in up_text[:9]):
                                accepted_list = str(db.get_many(cursor=bot_db_cursor, query=db_querys.user_allowed_get))
                                tg_send_message(msg="–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± "
                                                    "–∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö: {0}".format(accepted_list))
                            elif (up_type == "bot_command") and ("/accept" in up_text[:7]):
                                if up_chat_id == settings.admin_chat_id:
                                    allow_chat_id = int(up_text[7:])
                                    result, reason = allow_chat(allow_chat_id)
                                    if result:
                                        tg_send_message(msg="–í—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –≤ —á–∞—Ç "
                                                            "—Å id {0}".format(allow_chat_id))
                                        tg_send_message(msg="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫—Ä—ã–ª –¥–æ—Å—Ç—É–ø. –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö "
                                                            "–±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç.", ids=[allow_chat_id])
                                    else:
                                        tg_send_message(msg=reason)
                            elif (up_type == "bot_command") and ("/deny" in up_text[:5]):
                                if up_chat_id == settings.admin_chat_id:
                                    deny_chat_id = int(up_text[5:])
                                    if deny_chat_id in allowed_chats_ids.get():
                                        allowed_chats_ids.remove(deny_chat_id)
                                        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                                        tg_send_message("–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ù–ï –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è "
                                                        "–≤ —á–∞—Ç {0}".format(deny_chat_id))
                                    else:
                                        tg_send_message("–ß–∞—Ç–∞ —Å id {0} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ–ø–æ–≤–µ—â–∞–µ–º—ã—Ö.".format(deny_chat_id))
                            elif (up_type == "bot_command") and ("/banned" in up_text[:9]):
                                banned_list = str(db.get_many(cursor=bot_db_cursor, query=db_querys.user_banned_get))
                                tg_send_message(msg="–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {0}".format(banned_list))
                            elif (up_type == "bot_command") and ("/unban" in up_text[:6]):
                                if up_chat_id == settings.admin_chat_id:
                                    unban_chat_id = int(up_text[6:])
                                    log(f"–†–∞–∑–±–∞–Ω–∏—Ç—å {unban_chat_id}")
                                    if int(unban_chat_id) in banned_chats_ids.get():
                                        banned_chats_ids.remove(unban_chat_id)
                                        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                                        tg_send_message("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–∞—Ç {0}".format(unban_chat_id))
                                    else:
                                        tg_send_message("–ß–∞—Ç–∞ —Å id {0} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ "
                                                        "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.".format(unban_chat_id))
                            elif (up_type == "bot_command") and ("/ban" in up_text[:4]):
                                # TODO: –∑–∞–±–∞–Ω–∏—Ç—å
                                if up_chat_id == settings.admin_chat_id:
                                    ban_chat_id = up_text[4:]
                                    # —É–¥–∞–ª–∏—Ç—å –∏–∑ –ª–∏—Å—Ç–∞ –æ–ø–æ–≤–µ—â–∞–µ–º—ã—Ö
                                    if ban_chat_id in allowed_chats_ids.get():
                                        allowed_chats_ids.remove(ban_chat_id)
                                    # –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª–∏—Å—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                                    result, reason = ban_chat(int(ban_chat_id))
                                    if result:
                                        tg_send_message(msg="–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —á–∞—Ç —Å id {0}.".format(allow_chat_id))
                                    else:
                                        tg_send_message(msg=reason)
                            elif (up_type == "bot_command") and ("/help" in up_text[:5]):
                                if up_chat_id == settings.admin_chat_id:
                                    help_message = "/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n" \
                                                   "`/accept[id]` - –≤—Ä—É—á–Ω—É—é —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± " \
                                                   "–∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –≤ —á–∞—Ç –ø–æ id (–Ω–∞–ø—Ä–∏–º–µ—Ä `/accept123456789`)\n" \
                                                   "/accepted - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è " \
                                                   "–æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö\n" \
                                                   "`/deny[id]` - –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –≤ " \
                                                   "—á–∞—Ç –ø–æ id (–Ω–∞–ø—Ä–∏–º–µ—Ä `/accept123456789`)\n" \
                                                   "`/ban[id]` - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –ø–æ id: –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å " \
                                                   "–ª—é–±—ã–µ —Å–æ–±—ã—Ç–∏—è —Å —á–∞—Ç–æ–º, –Ω–µ –æ–ø–æ–≤–µ—â–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–µ–º " \
                                                   "(–Ω–∞–ø—Ä–∏–º–µ—Ä`/ban123456789`)\n" \
                                                   "`/unban[id]` - —É–±—Ä–∞—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö " \
                                                   "(–Ω–∞–ø—Ä–∏–º–µ—Ä`/ban123456789`)\n" \
                                                   "/banned - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n" \
                                                   "/debug - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n"
                                    tg_send_message(msg=help_message, parse_mode="Markdown")
                            elif (up_type == "bot_command") and (
                                    "/ping" in up_text[:5]) and up_chat_id in allowed_chats_ids:
                                tg_send_sticker(sticker_id=settings.ping_sticker, ids=[up_chat_id])
                            elif (up_type == "bot_command") and ("/debug" in up_text[:6]):
                                if up_chat_id == settings.admin_chat_id:
                                    msg = f"last_incident_time = {last_incident_time.get()}\n" \
                                          f"last_update = {last_update.get()}\n" \
                                          f"chat_ids = {allowed_chats_ids.get()}\n" \
                                          f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏: \n{logger}"
                                    tg_send_message(msg=msg)
                    except KeyError:
                        log("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–±–ª–µ–º–Ω—ã–π update: \n{0}".format(up))
                        continue
                    except NameError:
                        log("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–±–ª–µ–º–Ω—ã–π update: \n{0}".format(up))
                        continue
                else:
                    log("–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ")

            if 'callback_query' in up:
                # –ø–æ–ª—É—á–µ–Ω callback –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                if up['callback_query']['from']['id'] in banned_chats_ids:
                    # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                    continue
                callback_id = up['callback_query']['id']
                callback_data = up['callback_query']['data']
                callback_user_id = up['callback_query']['from']['id']
                callback_username = \
                    up['callback_query']['from']['username'] if 'username' in up['callback_query']['from'] else None
                callback_message_id = up['callback_query']['message']['message_id']
                callback_chat_id = up['callback_query']['message']['chat']['id']
                log(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç "
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_username} ({callback_user_id}): {callback_data}")
                if callback_user_id in allowed_chats_ids:
                    need_update = False
                    if "apprv" in callback_data[:5]:
                        # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç
                        approve_inc_id = callback_data[6:]
                        log("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç {inc} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user}".format(inc=approve_inc_id,
                                                                                             user=callback_user_id))
                        measures_text = "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç."
                        message_text = "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º " \
                                       "@{username} ({userid}) —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç.".format(username=callback_username,
                                                                                           userid=callback_user_id)
                        result = siem_set_incident_status(incident_id=approve_inc_id,
                                                          status="Approved",
                                                          measures=measures_text,
                                                          message=message_text)
                        if result == 204:
                            log("–ò–Ω—Ü–∏–¥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                            tg_answer_callback(callback_query_id=callback_id, text="–ò–Ω—Ü–∏–¥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                        else:
                            log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, SIEM –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {0}".format(result))
                            tg_answer_callback(callback_query_id=callback_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç")
                        need_update = True
                    if "close" in callback_data[:5]:
                        # –∑–∞–∫—Ä—ã—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç
                        close_inc_id = callback_data[6:]
                        log("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç {inc} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user}".format(inc=close_inc_id,
                                                                                         user=callback_user_id))
                        measures_text = "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç."
                        message_text = "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º " \
                                       "{username} ({userid}).".format(username=callback_username,
                                                                       userid=callback_user_id)
                        result = siem_set_incident_status(incident_id=close_inc_id,
                                                          status="Closed",
                                                          measures=measures_text,
                                                          message=message_text)
                        if result == "204":
                            log("–ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
                            tg_answer_callback(callback_query_id=callback_id, text="–ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
                        else:
                            log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {0}".format(result))
                            tg_answer_callback(callback_query_id=callback_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç")
                        need_update = True
                    if ("check" in callback_data[:5]) or need_update:
                        # –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
                        check_inc_id = callback_data[6:]
                        incident = siem_get_incident_by_id(incident_id=check_inc_id)
                        incident_str = incident_to_string(incident)
                        text = incident_str + "\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ " + str(datetime.now())
                        keyboard = generate_incident_keyboard(incident=incident)
                        tg_edit_message(msg=text, chat_id=callback_chat_id,
                                        message_id=callback_message_id, reply_markup=keyboard)
                        log("–í —á–∞—Ç–µ {0} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ {1}".format(callback_chat_id, check_inc_id))
                        tg_answer_callback(callback_query_id=callback_id, text="–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ")
                if callback_user_id == settings.admin_chat_id:
                    if 'accept' in callback_data[:6]:
                        accepted_chat_id = callback_data[6:]
                        result, reason = allow_chat(allow_chat_id=accepted_chat_id)
                        if result:
                            log(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–∏–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –≤ —á–∞—Ç {accepted_chat_id}")
                            text = f"–í—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —á–∞—Ç {accepted_chat_id} {datetime.now()}"
                            tg_edit_message(msg=text, chat_id=callback_chat_id,
                                            message_id=callback_message_id)
                            tg_send_message(msg="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫—Ä—ã–ª –¥–æ—Å—Ç—É–ø. –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö "
                                                "–±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç.", ids=[accepted_chat_id])
                        else:
                            tg_send_message(msg="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫: {0}".format(reason))
                    elif 'ignore' in callback_data[:6]:
                        ignored_chat_id = callback_data[6:]
                        log(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª —á–∞—Ç {ignored_chat_id}")
                    elif 'ban' in callback_data[:3]:
                        if callback_user_id == settings.admin_chat_id:
                            ban_chat_id = callback_data[3:]
                            result, reason = ban_chat(int(ban_chat_id))
                            if result:
                                text = f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —á–∞—Ç —Å id {ban_chat_id} {datetime.now()}"
                                tg_edit_message(msg=text, chat_id=callback_chat_id, message_id=callback_message_id)
                                log(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç —Å id {ban_chat_id}")
                            else:
                                tg_send_message(msg=reason)

            if 'my_chat_member' in up:
                if up['my_chat_member']['chat']['id'] in banned_chats_ids:
                    continue
                # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ
                if 'status' in up['my_chat_member']['new_chat_member']:
                    status = up['my_chat_member']['new_chat_member']['status']
                    if status == 'member':
                        new_chat_id = up['my_chat_member']['chat']['id']
                        new_chat_title = up['my_chat_member']['chat']['title']
                        log(f'–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {new_chat_title} ({new_chat_id})')
                        new_chats.append([new_chat_title, new_chat_id])
                    if status == 'left':
                        left_chat_id = up['my_chat_member']['chat']['id']
                        left_chat_title = up['my_chat_member']['chat']['title']
                        log(f'–ë–æ—Ç –≤—ã–≥–Ω–∞–Ω –∏–∑ —á–∞—Ç–∞ {left_chat_title} ({left_chat_id})')

        except Exception as up_parse_ex:
            log("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Telegram: {0}".format(up_parse_ex))

    if len(new_chats):
        for new_chat in new_chats:
            new_chat_id = new_chat[1]
            new_chat_name = new_chat[0]
            new_chat_type = "–≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç" if int(new_chat_id) < 0 else "—á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            new_chat_message = f"*–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π {new_chat_type} {new_chat_name} (id {new_chat_id}).* \n" \
                               f"–†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –≤ —ç—Ç–æ —á–∞—Ç?\n" \
                               f"‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n" \
                               f"‚èπ –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n" \
                               f"‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç—É–ø —ç—Ç–æ–≥–æ —á–∞—Ç–∞."
            new_chat_keyboard = generate_chat_keyboard(chat_id=new_chat_id)
            tg_send_message(msg=new_chat_message, reply_markup=new_chat_keyboard, parse_mode="Markdown")
        # tg_send_message("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞: \n" + str_new_chats)
    log("... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.")


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º
def tg_send_message(msg, ids=None, reply_markup=None, parse_mode=None):
    # –¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º –≤ ids –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if ids is None:
        ids = [settings.admin_chat_id]
    for id in ids:
        try:
            data = {
                'chat_id': id,
                'text': msg[:4096],
                'parse_mode': parse_mode
            }
            if reply_markup is not None:
                data.update({'reply_markup': reply_markup})
            response = requests.post("https://api.telegram.org/bot" + settings.tg_bot_token + "/sendMessage",
                                     data=data, timeout=5)
            if response.status_code == 200:
                log("–í —á–∞—Ç {0} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {1}".format(id, msg).replace("\n", " \\ "))
            else:
                log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {0}. –û—à–∏–±–∫–∞: {1}".format(id, response).replace("\n", " \\ "))
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º–∞ (–∞–Ω—Ç–∏—Å–ø–∞–º)
            time.sleep(0.4)
        except Exception as ex_send_tg_msg:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {0}: {1}".format(id, ex_send_tg_msg))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ gif-–∫–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
def tg_send_sticker(sticker_id, ids=None):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if ids is None:
        ids = [settings.admin_chat_id]
    for id in ids:
        try:
            response = requests.post("https://api.telegram.org/bot" + settings.tg_bot_token + "/sendSticker",
                                     data={'chat_id': id,
                                           'sticker': sticker_id})
            if response.status_code == 200:
                log("–í —á–∞—Ç {0} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –≥–∏—Ñ–∫–∞: {1}".format(id, sticker_id).replace("\n", " \\ "))
        except Exception as ex_send_tg_sticker:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –≥–∏—Ñ–∫—É –≤ —á–∞—Ç {0}: {1}".format(id, ex_send_tg_sticker))


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º
def tg_edit_message(msg, chat_id, message_id, reply_markup=None):
    try:
        response = requests.post("https://api.telegram.org/bot" + settings.tg_bot_token + "/editMessageText",
                                 data={'chat_id': chat_id,
                                       'message_id': message_id,
                                       'text': msg,
                                       'reply_markup': reply_markup})
        if response.status_code == 200:
            log("–ò–∑–º–µ–Ω–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å id {0}".format(message_id))
        else:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {0}. –û—à–∏–±–∫–∞: {1}".format(message_id, response).replace("\n", " \\ "))
    except Exception as ex_tg_edit_message:
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {0}. –û—à–∏–±–∫–∞: {1}".format(message_id,
                                                                    ex_tg_edit_message).replace("\n", " \\ "))


def tg_answer_callback(callback_query_id, text=None, show_alert=False, url=None, cache_time=0):
    try:
        response = requests.post("https://api.telegram.org/bot" + settings.tg_bot_token + "/answerCallbackQuery",
                                 data={'callback_query_id': callback_query_id,
                                       'text': text[:199],
                                       'show_alert': show_alert,
                                       'url': url,
                                       'cache_time': cache_time
                                       })
        if response.status_code == 200:
            log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω answerCallbackQuery: {0}".format(text))
        else:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answerCallbackQuery. "
                "–û—à–∏–±–∫–∞: {0} - {1}".format(response.status_code, response.reason).replace("\n", " \\ "))
    except Exception as ex_tg_answer_callback:
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answerCallbackQuery. –û—à–∏–±–∫–∞: {0}".format(ex_tg_answer_callback).replace("\n", " \\ "))


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –∏–Ω—Ü–∏–¥–µ–Ω—Ç
def generate_incident_keyboard(incident):
    inc_id = incident['id']
    if incident['status'] == "New":
        generated_keyboard = """{"resize_keyboard": true,"inline_keyboard": [[
        {"text":"üîÑ –û–±–Ω–æ–≤–∏—Ç—å","callback_data":"check-#incident_id#"},
        {"text":"‚ñ∂Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å","callback_data":"apprv-#incident_id#"},
        {"text":"‚èπ –ó–∞–∫—Ä—ã—Ç—å","callback_data":"close-#incident_id#"}
        ]]}""".replace("#incident_id#", inc_id)
    else:
        generated_keyboard = """{"resize_keyboard": true,"inline_keyboard": [[
        {"text":"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é","callback_data":"check-#incident_id#"}
        ]]}""".replace("#incident_id#", inc_id)
    return generated_keyboard


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –∏–Ω—Ü–∏–¥–µ–Ω—Ç
def generate_chat_keyboard(chat_id):
    generated_keyboard = """{"resize_keyboard": true,"inline_keyboard": [[
    {"text":"‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å","callback_data":"accept#chat_id#"}],
    [{"text":"‚èπ –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å","callback_data":"ignore#chat_id#"},
    {"text":"‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å","callback_data":"ban#chat_id#"}]]}""".replace("#chat_id#", str(chat_id))
    return generated_keyboard


# –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    tg_send_message(msg="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    work = True
    while work:
        try:
            # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
            incidents = siem_get_incidents()
            # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (—Å–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ –∏ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞)
            if incidents == 401:  # Unauthorised
                log("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ SIEM, –∞–≤—Ç–æ—Ä–∏–∑—É—é—Å—å.")
                # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
                if not siem_get_bearer_token():
                    tg_send_message(msg="–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ SIEM: –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
                    raise Exception("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
                continue
            # –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
            if len(incidents) > 0:
                log("–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã, –ø—Ä–æ–±—É—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö...")
                try:
                    tg_send_message(msg="–ù–æ–≤—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã:", ids=allowed_chats_ids.get())
                    for inc in reversed(incidents):
                        time.sleep(0.5)
                        inc_id = inc["id"]
                        keyboard = generate_incident_keyboard(incident=inc)
                        tg_send_message(msg=incident_to_string(inc), ids=allowed_chats_ids.get(), reply_markup=keyboard)
                        # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã, –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é last_incident_time
                        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ + 1 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å
                        # –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç
                        new_last_inc_time = (datetime.fromisoformat(inc['created'][:23])
                                             + timedelta(milliseconds=1)).isoformat() + 'Z'
                        log("Try to set last_incident_time = {0}".format(new_last_inc_time))
                        last_incident_time.set(new_last_inc_time)
                except requests.exceptions.ConnectTimeout:
                    log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º - ConnectTimeout")
                except ValueError as ex:
                    log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {0}".format(ex))
                except Exception as ex:
                    log(ex)
                time.sleep(settings.pause_time)
            else:
                log("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
                time.sleep(settings.pause_time)
                check_new_chats()
        except Exception as ex:
            log(ex)
            tg_send_message(msg="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n{0}".format(ex))
            raise
